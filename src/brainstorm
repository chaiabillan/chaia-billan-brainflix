App.js
- navbar 
- <Route path="/" element={<HomePage />} />

Pages: 
- Home (from the demo example, their first 3 pages are all combined here)
    - Navbar 
    - VideoPlayer
    - VideoPlayerDetails
    - VideoPlayerComments
    - VideoNext 
    - VideoNavItem 
- Video Upload 
    - Navbar 



Home page 
- the useState function takes in activeVideo and setActive video 
- the use effect grabs data from the API, specifically from the first video ID
- setActiveVideo is set to the response.data from the first ID video 
- it returns the UI for the the active video, which is set to the first video ID


VideoNavItem 
- this is each list item of videoNext 
- i think each list item needs to link to the "page" for the specific video 
    - this will be created using use params on a separate page 
- so is this instead of handleClick? 
    - the handle click function is on the div that holds the whole list item 
    - it takes the updateActiveVideo "function" from home page 
    - i have changed that though, and it now is just the setActiveVideo from use state that takes in response.data
        from first video only 

VideoNext 
- has a use state function that contains nextVideo and setNextVideo 
- use effect function grabs data from api for the array of next videos 
    - setNextVideo is set to the response.data which is ^^^
- the return function maps through nextVideo, which is basically just the array because thats what setNextVideo makes it
    - although its always just the same array 
    - i dont think that we even need a useState because it never actually changes except once (set to [] at first and then to the array)
- upon mapping through array, creates a <VideoNavItem> for each object in array 
    - props are passed to this, including 
        - its id
        - the video
        - the parent class
        - whether its active or not (isActive={video.id === activeVideo.id}) 
        - the updateActiveVideo function from before 
        - and the function to determine whether the video is the current video (isCurrentVideo={video.id === activeVideo.id})

useParams component
- so this needs to have the same return statement as the home page i think 
- and you need to set the useParams() to the video ID
- then use the find method on the array of full video details 
    - use it to find the video that makes the id of the param? 
        function updateActiveVideo ( clickedID ) {
            const newActiveVideo = currentVideoData.find((video) => video.id === clickedID)
        setActiveVideo(newActiveVideo);
        }
- for the return statement in the products example, it uses product.id which would be equivalent to video.id
    - im not sure if we should/can do this though












Using API to get data 
- url/comments 
    - contains info for the navbaritem (breif overview of videodata) 
    - use this for VideoNavItem (which VideoNext will then compile) 
- url/comments/:id 
    - contains detailed info for a specified video 
    - use this info in the VideoDetails component 
- url/comments/:id/comments 
    - contains the comments from said video 
    - use this info for the comment section 

so in order to make a separate "page" for each video
    - this would mean that each video has a separate path 
    - i think this path should depend on the video ID

    need to have a video page that takes in all of the components that the home page is taking in right now. 

    and so that means that the home page is just video[0]


Video Details Page
    - uses the same Page Component as Home Page
    - although, they have two separate Routes
        - 1. Home
        - 2. A selected video 
    - the route definiton for 2 could be the ID?

    For the Home Page, the video that should be displayed is the first video within the array of videos.
    For the Video Details Page, the video that should be displayed is the selected video within the array of videos.

    
